/*
* generated by Xtext
*/
package com.vmware.in.testframework.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TestFrameworkGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting*;
		public ParserRule getRule() { return rule; }

		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestcaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cTestcaseValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestcaseValueINTTerminalRuleCall_4_0 = (RuleCall)cTestcaseValueAssignment_4.eContents().get(0);
		private final Keyword cSummaryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cSPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cSPACETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cSummaryDetailsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSummaryDetailsSTRINGTerminalRuleCall_9_0 = (RuleCall)cSummaryDetailsAssignment_9.eContents().get(0);
		private final Assignment cActionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cActionFIRSTACTIONParserRuleCall_10_0 = (RuleCall)cActionAssignment_10.eContents().get(0);
		
		//Greeting:
		//	"Testcase" SPACE? "=" SPACE? testcaseValue=INT "Summary" SPACE? "=" SPACE? summaryDetails=STRING action=FIRSTACTION;
		public ParserRule getRule() { return rule; }

		//"Testcase" SPACE? "=" SPACE? testcaseValue=INT "Summary" SPACE? "=" SPACE? summaryDetails=STRING action=FIRSTACTION
		public Group getGroup() { return cGroup; }

		//"Testcase"
		public Keyword getTestcaseKeyword_0() { return cTestcaseKeyword_0; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }

		//testcaseValue=INT
		public Assignment getTestcaseValueAssignment_4() { return cTestcaseValueAssignment_4; }

		//INT
		public RuleCall getTestcaseValueINTTerminalRuleCall_4_0() { return cTestcaseValueINTTerminalRuleCall_4_0; }

		//"Summary"
		public Keyword getSummaryKeyword_5() { return cSummaryKeyword_5; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_6() { return cSPACETerminalRuleCall_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_8() { return cSPACETerminalRuleCall_8; }

		//summaryDetails=STRING
		public Assignment getSummaryDetailsAssignment_9() { return cSummaryDetailsAssignment_9; }

		//STRING
		public RuleCall getSummaryDetailsSTRINGTerminalRuleCall_9_0() { return cSummaryDetailsSTRINGTerminalRuleCall_9_0; }

		//action=FIRSTACTION
		public Assignment getActionAssignment_10() { return cActionAssignment_10; }

		//FIRSTACTION
		public RuleCall getActionFIRSTACTIONParserRuleCall_10_0() { return cActionFIRSTACTIONParserRuleCall_10_0; }
	}

	public class FIRSTACTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIRSTACTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChecktableActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cChecktableActionChecktableKeyword_0_0 = (Keyword)cChecktableActionAssignment_0.eContents().get(0);
		private final Assignment cNextActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextActionTABLEACTIONParserRuleCall_1_0 = (RuleCall)cNextActionAssignment_1.eContents().get(0);
		
		//FIRSTACTION:
		//	checktableAction="Checktable" nextAction=TABLEACTION;
		public ParserRule getRule() { return rule; }

		//checktableAction="Checktable" nextAction=TABLEACTION
		public Group getGroup() { return cGroup; }

		//checktableAction="Checktable"
		public Assignment getChecktableActionAssignment_0() { return cChecktableActionAssignment_0; }

		//"Checktable"
		public Keyword getChecktableActionChecktableKeyword_0_0() { return cChecktableActionChecktableKeyword_0_0; }

		//nextAction=TABLEACTION
		public Assignment getNextActionAssignment_1() { return cNextActionAssignment_1; }

		//TABLEACTION
		public RuleCall getNextActionTABLEACTIONParserRuleCall_1_0() { return cNextActionTABLEACTIONParserRuleCall_1_0; }
	}

	public class TABLEACTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TABLEACTION");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierActionIDENTIFIERParserRuleCall_2_0 = (RuleCall)cIdentifierActionAssignment_2.eContents().get(0);
		private final Assignment cNextActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNextActionLABELParserRuleCall_3_0 = (RuleCall)cNextActionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TABLEACTION:
		//	"Table" "{" identifierAction=IDENTIFIER nextAction=LABEL "}";
		public ParserRule getRule() { return rule; }

		//"Table" "{" identifierAction=IDENTIFIER nextAction=LABEL "}"
		public Group getGroup() { return cGroup; }

		//"Table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//identifierAction=IDENTIFIER
		public Assignment getIdentifierActionAssignment_2() { return cIdentifierActionAssignment_2; }

		//IDENTIFIER
		public RuleCall getIdentifierActionIDENTIFIERParserRuleCall_2_0() { return cIdentifierActionIDENTIFIERParserRuleCall_2_0; }

		//nextAction=LABEL
		public Assignment getNextActionAssignment_3() { return cNextActionAssignment_3; }

		//LABEL
		public RuleCall getNextActionLABELParserRuleCall_3_0() { return cNextActionLABELParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class IDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cIdentifiervalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdentifiervalueSTRINGTerminalRuleCall_4_0 = (RuleCall)cIdentifiervalueAssignment_4.eContents().get(0);
		
		//IDENTIFIER:
		//	"identifier" SPACE? "=" SPACE? identifiervalue=STRING;
		public ParserRule getRule() { return rule; }

		//"identifier" SPACE? "=" SPACE? identifiervalue=STRING
		public Group getGroup() { return cGroup; }

		//"identifier"
		public Keyword getIdentifierKeyword_0() { return cIdentifierKeyword_0; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }

		//identifiervalue=STRING
		public Assignment getIdentifiervalueAssignment_4() { return cIdentifiervalueAssignment_4; }

		//STRING
		public RuleCall getIdentifiervalueSTRINGTerminalRuleCall_4_0() { return cIdentifiervalueSTRINGTerminalRuleCall_4_0; }
	}

	public class LABELElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LABEL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSPACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cLabelvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelvalueIDTerminalRuleCall_4_0 = (RuleCall)cLabelvalueAssignment_4.eContents().get(0);
		
		//LABEL:
		//	"label" SPACE? "=" SPACE? labelvalue=ID;
		public ParserRule getRule() { return rule; }

		//"label" SPACE? "=" SPACE? labelvalue=ID
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_1() { return cSPACETerminalRuleCall_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//SPACE?
		public RuleCall getSPACETerminalRuleCall_3() { return cSPACETerminalRuleCall_3; }

		//labelvalue=ID
		public Assignment getLabelvalueAssignment_4() { return cLabelvalueAssignment_4; }

		//ID
		public RuleCall getLabelvalueIDTerminalRuleCall_4_0() { return cLabelvalueIDTerminalRuleCall_4_0; }
	}
	
	
	private ModelElements pModel;
	private GreetingElements pGreeting;
	private FIRSTACTIONElements pFIRSTACTION;
	private TABLEACTIONElements pTABLEACTION;
	private IDENTIFIERElements pIDENTIFIER;
	private LABELElements pLABEL;
	private TerminalRule tSPACE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TestFrameworkGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.vmware.in.testframework.TestFramework".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Greeting:
	//	"Testcase" SPACE? "=" SPACE? testcaseValue=INT "Summary" SPACE? "=" SPACE? summaryDetails=STRING action=FIRSTACTION;
	public GreetingElements getGreetingAccess() {
		return (pGreeting != null) ? pGreeting : (pGreeting = new GreetingElements());
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	//FIRSTACTION:
	//	checktableAction="Checktable" nextAction=TABLEACTION;
	public FIRSTACTIONElements getFIRSTACTIONAccess() {
		return (pFIRSTACTION != null) ? pFIRSTACTION : (pFIRSTACTION = new FIRSTACTIONElements());
	}
	
	public ParserRule getFIRSTACTIONRule() {
		return getFIRSTACTIONAccess().getRule();
	}

	//TABLEACTION:
	//	"Table" "{" identifierAction=IDENTIFIER nextAction=LABEL "}";
	public TABLEACTIONElements getTABLEACTIONAccess() {
		return (pTABLEACTION != null) ? pTABLEACTION : (pTABLEACTION = new TABLEACTIONElements());
	}
	
	public ParserRule getTABLEACTIONRule() {
		return getTABLEACTIONAccess().getRule();
	}

	//IDENTIFIER:
	//	"identifier" SPACE? "=" SPACE? identifiervalue=STRING;
	public IDENTIFIERElements getIDENTIFIERAccess() {
		return (pIDENTIFIER != null) ? pIDENTIFIER : (pIDENTIFIER = new IDENTIFIERElements());
	}
	
	public ParserRule getIDENTIFIERRule() {
		return getIDENTIFIERAccess().getRule();
	}

	//LABEL:
	//	"label" SPACE? "=" SPACE? labelvalue=ID;
	public LABELElements getLABELAccess() {
		return (pLABEL != null) ? pLABEL : (pLABEL = new LABELElements());
	}
	
	public ParserRule getLABELRule() {
		return getLABELAccess().getRule();
	}

	//terminal SPACE:
	//	" "*;
	public TerminalRule getSPACERule() {
		return (tSPACE != null) ? tSPACE : (tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPACE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
