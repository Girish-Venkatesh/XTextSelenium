/*
* generated by Xtext
*/
grammar InternalTestFramework;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.vmware.in.testframework.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.vmware.in.testframework.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.vmware.in.testframework.services.TestFrameworkGrammarAccess;

}

@parser::members {

 	private TestFrameworkGrammarAccess grammarAccess;
 	
    public InternalTestFrameworkParser(TokenStream input, TestFrameworkGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected TestFrameworkGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Testcase' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGreetingAccess().getTestcaseKeyword_0());
    }
(this_SPACE_1=RULE_SPACE
    { 
    newLeafNode(this_SPACE_1, grammarAccess.getGreetingAccess().getSPACETerminalRuleCall_1()); 
    }
)?	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getEqualsSignKeyword_2());
    }
(this_SPACE_3=RULE_SPACE
    { 
    newLeafNode(this_SPACE_3, grammarAccess.getGreetingAccess().getSPACETerminalRuleCall_3()); 
    }
)?(
(
		lv_testcaseValue_4_0=RULE_INT
		{
			newLeafNode(lv_testcaseValue_4_0, grammarAccess.getGreetingAccess().getTestcaseValueINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"testcaseValue",
        		lv_testcaseValue_4_0, 
        		"INT");
	    }

)
)	otherlv_5='Summary' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGreetingAccess().getSummaryKeyword_5());
    }
(this_SPACE_6=RULE_SPACE
    { 
    newLeafNode(this_SPACE_6, grammarAccess.getGreetingAccess().getSPACETerminalRuleCall_6()); 
    }
)?	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGreetingAccess().getEqualsSignKeyword_7());
    }
(this_SPACE_8=RULE_SPACE
    { 
    newLeafNode(this_SPACE_8, grammarAccess.getGreetingAccess().getSPACETerminalRuleCall_8()); 
    }
)?(
(
		lv_summaryDetails_9_0=RULE_STRING
		{
			newLeafNode(lv_summaryDetails_9_0, grammarAccess.getGreetingAccess().getSummaryDetailsSTRINGTerminalRuleCall_9_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"summaryDetails",
        		lv_summaryDetails_9_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGreetingAccess().getActionFIRSTACTIONParserRuleCall_10_0()); 
	    }
		lv_action_10_0=ruleFIRSTACTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGreetingRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_10_0, 
        		"FIRSTACTION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFIRSTACTION
entryRuleFIRSTACTION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFIRSTACTIONRule()); }
	 iv_ruleFIRSTACTION=ruleFIRSTACTION 
	 { $current=$iv_ruleFIRSTACTION.current; } 
	 EOF 
;

// Rule FIRSTACTION
ruleFIRSTACTION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_checktableAction_0_0=	'Checktable' 
    {
        newLeafNode(lv_checktableAction_0_0, grammarAccess.getFIRSTACTIONAccess().getChecktableActionChecktableKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFIRSTACTIONRule());
	        }
       		setWithLastConsumed($current, "checktableAction", lv_checktableAction_0_0, "Checktable");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFIRSTACTIONAccess().getNextActionTABLEACTIONParserRuleCall_1_0()); 
	    }
		lv_nextAction_1_0=ruleTABLEACTION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFIRSTACTIONRule());
	        }
       		set(
       			$current, 
       			"nextAction",
        		lv_nextAction_1_0, 
        		"TABLEACTION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTABLEACTION
entryRuleTABLEACTION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTABLEACTIONRule()); }
	 iv_ruleTABLEACTION=ruleTABLEACTION 
	 { $current=$iv_ruleTABLEACTION.current; } 
	 EOF 
;

// Rule TABLEACTION
ruleTABLEACTION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Table' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTABLEACTIONAccess().getTableKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTABLEACTIONAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTABLEACTIONAccess().getIdentifierActionIDENTIFIERParserRuleCall_2_0()); 
	    }
		lv_identifierAction_2_0=ruleIDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTABLEACTIONRule());
	        }
       		set(
       			$current, 
       			"identifierAction",
        		lv_identifierAction_2_0, 
        		"IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTABLEACTIONAccess().getNextActionLABELParserRuleCall_3_0()); 
	    }
		lv_nextAction_3_0=ruleLABEL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTABLEACTIONRule());
	        }
       		set(
       			$current, 
       			"nextAction",
        		lv_nextAction_3_0, 
        		"LABEL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTABLEACTIONAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleIDENTIFIER
entryRuleIDENTIFIER returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDENTIFIERRule()); }
	 iv_ruleIDENTIFIER=ruleIDENTIFIER 
	 { $current=$iv_ruleIDENTIFIER.current; } 
	 EOF 
;

// Rule IDENTIFIER
ruleIDENTIFIER returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='identifier' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIDENTIFIERAccess().getIdentifierKeyword_0());
    }
(this_SPACE_1=RULE_SPACE
    { 
    newLeafNode(this_SPACE_1, grammarAccess.getIDENTIFIERAccess().getSPACETerminalRuleCall_1()); 
    }
)?	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIDENTIFIERAccess().getEqualsSignKeyword_2());
    }
(this_SPACE_3=RULE_SPACE
    { 
    newLeafNode(this_SPACE_3, grammarAccess.getIDENTIFIERAccess().getSPACETerminalRuleCall_3()); 
    }
)?(
(
		lv_identifiervalue_4_0=RULE_STRING
		{
			newLeafNode(lv_identifiervalue_4_0, grammarAccess.getIDENTIFIERAccess().getIdentifiervalueSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIDENTIFIERRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifiervalue",
        		lv_identifiervalue_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleLABEL
entryRuleLABEL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLABELRule()); }
	 iv_ruleLABEL=ruleLABEL 
	 { $current=$iv_ruleLABEL.current; } 
	 EOF 
;

// Rule LABEL
ruleLABEL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='label' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLABELAccess().getLabelKeyword_0());
    }
(this_SPACE_1=RULE_SPACE
    { 
    newLeafNode(this_SPACE_1, grammarAccess.getLABELAccess().getSPACETerminalRuleCall_1()); 
    }
)?	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLABELAccess().getEqualsSignKeyword_2());
    }
(this_SPACE_3=RULE_SPACE
    { 
    newLeafNode(this_SPACE_3, grammarAccess.getLABELAccess().getSPACETerminalRuleCall_3()); 
    }
)?(
(
		lv_labelvalue_4_0=RULE_ID
		{
			newLeafNode(lv_labelvalue_4_0, grammarAccess.getLABELAccess().getLabelvalueIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLABELRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"labelvalue",
        		lv_labelvalue_4_0, 
        		"ID");
	    }

)
))
;





RULE_SPACE : ' '*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


