/*
* generated by Xtext
*/
package com.vmware.in.testframework.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.vmware.in.testframework.services.TestFrameworkGrammarAccess;

public class TestFrameworkParser extends AbstractContentAssistParser {
	
	@Inject
	private TestFrameworkGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.vmware.in.testframework.ui.contentassist.antlr.internal.InternalTestFrameworkParser createParser() {
		com.vmware.in.testframework.ui.contentassist.antlr.internal.InternalTestFrameworkParser result = new com.vmware.in.testframework.ui.contentassist.antlr.internal.InternalTestFrameworkParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGreetingAccess().getGroup(), "rule__Greeting__Group__0");
					put(grammarAccess.getFIRSTACTIONAccess().getGroup(), "rule__FIRSTACTION__Group__0");
					put(grammarAccess.getTABLEACTIONAccess().getGroup(), "rule__TABLEACTION__Group__0");
					put(grammarAccess.getIDENTIFIERAccess().getGroup(), "rule__IDENTIFIER__Group__0");
					put(grammarAccess.getLABELAccess().getGroup(), "rule__LABEL__Group__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
					put(grammarAccess.getGreetingAccess().getTestcaseValueAssignment_4(), "rule__Greeting__TestcaseValueAssignment_4");
					put(grammarAccess.getGreetingAccess().getSummaryDetailsAssignment_9(), "rule__Greeting__SummaryDetailsAssignment_9");
					put(grammarAccess.getGreetingAccess().getActionAssignment_10(), "rule__Greeting__ActionAssignment_10");
					put(grammarAccess.getFIRSTACTIONAccess().getChecktableActionAssignment_0(), "rule__FIRSTACTION__ChecktableActionAssignment_0");
					put(grammarAccess.getFIRSTACTIONAccess().getNextActionAssignment_1(), "rule__FIRSTACTION__NextActionAssignment_1");
					put(grammarAccess.getTABLEACTIONAccess().getIdentifierActionAssignment_2(), "rule__TABLEACTION__IdentifierActionAssignment_2");
					put(grammarAccess.getTABLEACTIONAccess().getNextActionAssignment_3(), "rule__TABLEACTION__NextActionAssignment_3");
					put(grammarAccess.getIDENTIFIERAccess().getIdentifiervalueAssignment_4(), "rule__IDENTIFIER__IdentifiervalueAssignment_4");
					put(grammarAccess.getLABELAccess().getLabelvalueAssignment_4(), "rule__LABEL__LabelvalueAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.vmware.in.testframework.ui.contentassist.antlr.internal.InternalTestFrameworkParser typedParser = (com.vmware.in.testframework.ui.contentassist.antlr.internal.InternalTestFrameworkParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TestFrameworkGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TestFrameworkGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
